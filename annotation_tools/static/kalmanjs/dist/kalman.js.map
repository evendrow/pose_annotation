{"version":3,"file":"kalman.js","sources":["../src/kalman.js"],"sourcesContent":["/**\n* KalmanFilter\n* @class\n* @author Wouter Bulten\n* @see {@link http://github.com/wouterbulten/kalmanjs}\n* @version Version: 1.0.0-beta\n* @copyright Copyright 2015-2018 Wouter Bulten\n* @license MIT License\n* @preserve\n*/\nexport default class KalmanFilter {\n\n  /**\n  * Create 1-dimensional kalman filter\n  * @param  {Number} options.R Process noise\n  * @param  {Number} options.Q Measurement noise\n  * @param  {Number} options.A State vector\n  * @param  {Number} options.B Control vector\n  * @param  {Number} options.C Measurement vector\n  * @return {KalmanFilter}\n  */\n  constructor({R = 1, Q = 1, A = 1, B = 0, C = 1} = {}) {\n\n    this.R = R; // noise power desirable\n    this.Q = Q; // noise power estimated\n\n    this.A = A;\n    this.C = C;\n    this.B = B;\n    this.cov = NaN;\n    this.x = NaN; // estimated signal without noise\n  }\n\n  /**\n  * Filter a new value\n  * @param  {Number} z Measurement\n  * @param  {Number} u Control\n  * @return {Number}\n  */\n  filter(z, u = 0) {\n\n    if (isNaN(this.x)) {\n      this.x = (1 / this.C) * z;\n      this.cov = (1 / this.C) * this.Q * (1 / this.C);\n    }\n    else {\n\n      // Compute prediction\n      const predX = this.predict(u);\n      const predCov = this.uncertainty();\n\n      // Kalman gain\n      const K = predCov * this.C * (1 / ((this.C * predCov * this.C) + this.Q));\n\n      // Correction\n      this.x = predX + K * (z - (this.C * predX));\n      this.cov = predCov - (K * this.C * predCov);\n    }\n\n    return this.x;\n  }\n\n  /**\n  * Predict next value\n  * @param  {Number} [u] Control\n  * @return {Number}\n  */\n  predict(u = 0) {\n    return (this.A * this.x) + (this.B * u);\n  }\n  \n  /**\n  * Return uncertainty of filter\n  * @return {Number}\n  */\n  uncertainty() {\n    return ((this.A * this.cov) * this.A) + this.R;\n  }\n  \n  /**\n  * Return the last filtered measurement\n  * @return {Number}\n  */\n  lastMeasurement() {\n    return this.x;\n  }\n\n  /**\n  * Set measurement noise Q\n  * @param {Number} noise\n  */\n  setMeasurementNoise(noise) {\n    this.Q = noise;\n  }\n\n  /**\n  * Set the process noise R\n  * @param {Number} noise\n  */\n  setProcessNoise(noise) {\n    this.R = noise;\n  }\n}\n"],"names":["KalmanFilter","R","Q","A","B","C","cov","NaN","x","z","u","isNaN","predX","predict","predCov","uncertainty","K","noise"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;;;;;;;;;;MAUqBA;;;EAEnB;;;;;;;;;EASA,0BAAsD;EAAA,mFAAJ,EAAI;EAAA,sBAAzCC,CAAyC;EAAA,QAAzCA,CAAyC,uBAArC,CAAqC;EAAA,sBAAlCC,CAAkC;EAAA,QAAlCA,CAAkC,uBAA9B,CAA8B;EAAA,sBAA3BC,CAA2B;EAAA,QAA3BA,CAA2B,uBAAvB,CAAuB;EAAA,sBAApBC,CAAoB;EAAA,QAApBA,CAAoB,uBAAhB,CAAgB;EAAA,sBAAbC,CAAa;EAAA,QAAbA,CAAa,uBAAT,CAAS;;EAAA;;EAEpD,SAAKJ,CAAL,GAASA,CAAT,CAFoD;;EAGpD,SAAKC,CAAL,GAASA,CAAT,CAHoD;;EAKpD,SAAKC,CAAL,GAASA,CAAT;EACA,SAAKE,CAAL,GAASA,CAAT;EACA,SAAKD,CAAL,GAASA,CAAT;EACA,SAAKE,GAAL,GAAWC,GAAX;EACA,SAAKC,CAAL,GAASD,GAAT,CAToD;EAUrD;EAED;;;;;;;;;;6BAMOE,GAAU;EAAA,UAAPC,CAAO,uEAAH,CAAG;;EAEf,UAAIC,KAAK,CAAC,KAAKH,CAAN,CAAT,EAAmB;EACjB,aAAKA,CAAL,GAAU,IAAI,KAAKH,CAAV,GAAeI,CAAxB;EACA,aAAKH,GAAL,GAAY,IAAI,KAAKD,CAAV,GAAe,KAAKH,CAApB,IAAyB,IAAI,KAAKG,CAAlC,CAAX;EACD,OAHD,MAIK;EAEH;EACA,YAAMO,KAAK,GAAG,KAAKC,OAAL,CAAaH,CAAb,CAAd;EACA,YAAMI,OAAO,GAAG,KAAKC,WAAL,EAAhB,CAJG;;EAOH,YAAMC,CAAC,GAAGF,OAAO,GAAG,KAAKT,CAAf,IAAoB,KAAM,KAAKA,CAAL,GAASS,OAAT,GAAmB,KAAKT,CAAzB,GAA8B,KAAKH,CAAxC,CAApB,CAAV,CAPG;;EAUH,aAAKM,CAAL,GAASI,KAAK,GAAGI,CAAC,IAAIP,CAAC,GAAI,KAAKJ,CAAL,GAASO,KAAlB,CAAlB;EACA,aAAKN,GAAL,GAAWQ,OAAO,GAAIE,CAAC,GAAG,KAAKX,CAAT,GAAaS,OAAnC;EACD;;EAED,aAAO,KAAKN,CAAZ;EACD;EAED;;;;;;;;gCAKe;EAAA,UAAPE,CAAO,uEAAH,CAAG;EACb,aAAQ,KAAKP,CAAL,GAAS,KAAKK,CAAf,GAAqB,KAAKJ,CAAL,GAASM,CAArC;EACD;EAED;;;;;;;oCAIc;EACZ,aAAS,KAAKP,CAAL,GAAS,KAAKG,GAAf,GAAsB,KAAKH,CAA5B,GAAiC,KAAKF,CAA7C;EACD;EAED;;;;;;;wCAIkB;EAChB,aAAO,KAAKO,CAAZ;EACD;EAED;;;;;;;0CAIoBS,OAAO;EACzB,WAAKf,CAAL,GAASe,KAAT;EACD;EAED;;;;;;;sCAIgBA,OAAO;EACrB,WAAKhB,CAAL,GAASgB,KAAT;EACD;;;;;;;;;;;;"}